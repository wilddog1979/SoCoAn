<?xml version="1.0" encoding="UTF-8"?>
<Language 
		xmlns="http://eaSTars.com/SoCoAn/lang">
	<Include file="Keywords.xml"/>

	<LiteralType id="Digit0" literal="0"/>
	<LiteralType id="Digit1" literal="1"/>
	<LiteralType id="Digit2" literal="2"/>
	<LiteralType id="Digit3" literal="3"/>
	<LiteralType id="Digit4" literal="4"/>
	<LiteralType id="Digit5" literal="5"/>
	<LiteralType id="Digit6" literal="6"/>
	<LiteralType id="Digit7" literal="7"/>
	<LiteralType id="Digit8" literal="8"/>
	<LiteralType id="Digit9" literal="9"/>
	<LiteralType id="Digita" literal="a"/>
	<LiteralType id="Digitb" literal="b"/>
	<LiteralType id="Digitc" literal="c"/>
	<LiteralType id="Digitd" literal="d"/>
	<LiteralType id="Digite" literal="e"/>
	<LiteralType id="Digitf" literal="f"/>
	<LiteralType id="DigitA" literal="A"/>
	<LiteralType id="DigitB" literal="B"/>
	<LiteralType id="DigitC" literal="C"/>
	<LiteralType id="DigitD" literal="D"/>
	<LiteralType id="DigitE" literal="E"/>
	<LiteralType id="DigitF" literal="F"/>
	
	<ComplexType id="BinaryDigit" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="Digit0"/>
			<Node type="Digit1"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="ZeroToThree" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="Digit0"/>
			<Node type="Digit1"/>
			<Node type="Digit2"/>
			<Node type="Digit3"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="OctalDigit" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="Digit0"/>
			<Node type="Digit1"/>
			<Node type="Digit2"/>
			<Node type="Digit3"/>
			<Node type="Digit4"/>
			<Node type="Digit5"/>
			<Node type="Digit6"/>
			<Node type="Digit7"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="NonZeroDigit" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="Digit0"/>
			<Node type="Digit1"/>
			<Node type="Digit2"/>
			<Node type="Digit3"/>
			<Node type="Digit4"/>
			<Node type="Digit5"/>
			<Node type="Digit6"/>
			<Node type="Digit7"/>
			<Node type="Digit8"/>
			<Node type="Digit9"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="Digit" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="Digit0"/>
			<Node type="NonZeroDigit"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="HexDigit" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="Digit0"/>
			<Node type="Digit1"/>
			<Node type="Digit2"/>
			<Node type="Digit3"/>
			<Node type="Digit4"/>
			<Node type="Digit5"/>
			<Node type="Digit6"/>
			<Node type="Digit7"/>
			<Node type="Digit8"/>
			<Node type="Digit9"/>
			<Node type="Digita"/>
			<Node type="Digitb"/>
			<Node type="Digitc"/>
			<Node type="Digitd"/>
			<Node type="Digite"/>
			<Node type="Digitf"/>
			<Node type="DigitA"/>
			<Node type="DigitB"/>
			<Node type="DigitC"/>
			<Node type="DigitD"/>
			<Node type="DigitE"/>
			<Node type="DigitF"/>
		</StartNode>
	</ComplexType>

	<LiteralType id="SP" literal=" "/>
	<LiteralType id="BS" literal="\b"/>
	<LiteralType id="HT" literal="\t"/>
	<LiteralType id="LF" literal="\n"/>
	<LiteralType id="FF" literal="\f"/>
	<LiteralType id="CR" literal="\r"/>
	
	<LiteralType id="DoubleQuote" literal="&quot;"/>
	<LiteralType id="SingleQuote" literal="'"/>
	<LiteralType id="Backslash" literal="\"/>

	<!-- 3.3 Unicode Escapes -->
	
	<LiteralType id="UnicodeEscapeu" literal="u"/>

	<ComplexType id="UnicodeMarker" processor="aggregating">
		<StartNode sequence="Order">
			<Node type="UnicodeEscapeu"/>
			<Node type="UnicodeEscapeu" occurrence="ZeroOrMore"/>
		</StartNode>
	</ComplexType>

	<ComplexType id="UnicodeEscape" processor="aggregating">
		<StartNode sequence="Order">
			<Node type="Backslash" sequence="Order"/>
			<Node type="UnicodeMarker"/>
			<Node type="HexDigit"/>
			<Node type="HexDigit"/>
			<Node type="HexDigit"/>
			<Node type="HexDigit"/>
		</StartNode>
	</ComplexType>
	
	<CustomType id="RawInputCharacter" recognizer="RawInputCharacter"/>

	<ComplexType id="UnicodeInputCharacter" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="UnicodeEscape"/>
			<Node type="RawInputCharacter"/>
		</StartNode>
	</ComplexType>

	<!-- 3.4 Line Terminators -->

	<ComplexType id="LineTerminator" processor="aggregating">
		<StartNode sequence="Any">
			<GroupNode sequence="Order">
				<Node type="CR" occurrence="ZeroOrOne"/>
				<Node type="LF"/>
			</GroupNode>
			<Node type="CR"/>
		</StartNode>
	</ComplexType>

	<ComplexType id="InputCharacter" processor="aggregating" checker="InputCharacterCheck">
		<StartNode sequence="Order">
			<Node type="UnicodeInputCharacter"/>
		</StartNode>
	</ComplexType>

	<!-- 3.6 White Space -->

	<ComplexType id="WhiteSpace" processor="aggregating" multiple="true">
		<StartNode sequence="Any">
			<Node type="SP"/>
			<Node type="HT"/>
			<Node type="FF"/>
			<Node type="LineTerminator"/>
		</StartNode>
	</ComplexType>
	
	<!--  Comments -->
	
	<LiteralType id="JavaDocStart" literal="/**"/>
	<LiteralType id="TraditionalCommentStart" literal="/*"/>
	
	<TerminatedType id="TraditionalCommentContent">
		<Terminator>*/</Terminator>
	</TerminatedType>
	
	<LiteralType id="EndOfLineCommentStart" literal="//"/>
	
	<TerminatedType id="EndOfLineCommentContent">
		<Terminator>\r\n</Terminator>
		<Terminator>\n</Terminator>
	</TerminatedType>
	
	<ComplexType id="Comment" processor="comment">
		<StartNode sequence="Order">
			<Node id="JavaDoc" type="JavaDocStart"/>
			<Node type="TraditionalCommentContent"/>
		</StartNode>
		
		<StartNode sequence="Order">
			<Node id="TraditionalComment" type="TraditionalCommentStart"/>
			<Node type="TraditionalCommentContent"/>
		</StartNode>
		
		<StartNode sequence="Order">
			<Node id="EndOfLineComment" type="EndOfLineCommentStart"/>
			<Node type="EndOfLineCommentContent"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="Separator" processor="separator" multiple="true">
		<StartNode sequence="Any">
			<Node type="WhiteSpace"/>
			<Node type="Comment"/>
		</StartNode>
	</ComplexType>
	
	<!-- 3.8 Identifiers -->
	
	<CustomType id="JavaLetter" recognizer="JavaLetter"/>
	
	<CustomType id="JavaLetterOrDigit" recognizer="JavaLetterOrDigit"/>
	
	<ComplexType id="Identifier" processor="aggregating" checker="IdentifierCheck">
		<StartNode sequence="Order">
			<Node type="JavaLetter"/>
			<Node type="JavaLetterOrDigit" occurrence="ZeroOrMore"/>
		</StartNode>
	</ComplexType>
	
	<!-- 3.10 Literals -->
	
	<!-- 3.10.1 Integer Literals -->
	
	<LiteralType id="Suffixl" literal="l"/>
	<LiteralType id="SuffixL" literal="L"/>
	<LiteralType id="Underscore" literal="_"/>
	<LiteralType id="Prefix0x" literal="0x"/>
	<LiteralType id="Prefix0X" literal="0X"/>
	<LiteralType id="Prefix0b" literal="0b"/>
	<LiteralType id="Prefix0B" literal="0B"/>
	
	<Include file="IntegerLiterals.xml"/>
	
	<!-- 3.10.2 Floating-Point Literals -->
	
	<LiteralType id="Exponente" literal="e"/>
	<LiteralType id="ExponentE" literal="E"/>
	<LiteralType id="Sign+" literal="+"/>
	<LiteralType id="Sign-" literal="-"/>
	<LiteralType id="FloatTypef" literal="f"/>
	<LiteralType id="FloatTypeF" literal="F"/>
	<LiteralType id="FloatTyped" literal="d"/>
	<LiteralType id="FloatTypeD" literal="D"/>
	<LiteralType id="DecimalSeparator" literal="."/>
	<LiteralType id="BinaryExpp" literal="p"/>
	<LiteralType id="BinaryExpP" literal="P"/>
	
	<Include file="FloatingPointLiterals.xml"/>
	
	<!-- 3.10.3 Boolean Literals -->
	
	<LiteralType id="True" literal="true"/>
	
	<LiteralType id="False" literal="false"/>
	
	<ComplexType id="BooleanLiteral" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="True"/>
			<Node type="False"/>
		</StartNode>
	</ComplexType>
	
	<!-- 3.10.6 Escape Sequences for Character and String Literals -->
	
	<LiteralType id="Escapeb" literal="b"/>
	<LiteralType id="Escapet" literal="t"/>
	<LiteralType id="Escapen" literal="n"/>
	<LiteralType id="Escapef" literal="f"/>
	<LiteralType id="Escaper" literal="r"/>
	
	<ComplexType id="OctalEscape" processor="aggregating">
		<StartNode sequence="Order">
			<Node type="Backslash"/>
			<Node type="ZeroToThree"/>
			<Node type="OctalDigit"/>
			<Node type="OctalDigit"/>
		</StartNode>
		<StartNode sequence="Order">
			<Node type="Backslash"/>
			<Node type="OctalDigit"/>
			<Node type="OctalDigit"/>
		</StartNode>
		<StartNode sequence="Order">
			<Node type="Backslash"/>
			<Node type="OctalDigit"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="EscapeSequence" processor="aggregating">
		<StartNode sequence="Any">
			<GroupNode sequence="Order">
				<Node type="Backslash"/>
				<GroupNode sequence="Any">
					<Node type="Escapeb"/>
					<Node type="Escapet"/>
					<Node type="Escapen"/>
					<Node type="Escapef"/>
					<Node type="Escaper"/>
					<Node type="DoubleQuote"/>
					<Node type="SingleQuote"/>
					<Node type="Backslash"/>
				</GroupNode>
			</GroupNode>
			<Node type="OctalEscape"/>
		</StartNode>
	</ComplexType>
	
	<!-- 3.10.4 Character Literals -->
	
	<ComplexType id="SingleCharacter" processor="aggregating" checker="SingleCharacterCheck">
		<StartNode sequence="Order">
			<Node type="InputCharacter"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="CharacterLiteral" processor="aggregating">
		<StartNode sequence="Order">
			<Node type="SingleQuote"/>
			<Node type="SingleCharacter"/>
			<Node type="SingleQuote"/>
		</StartNode>
		<StartNode sequence="Order">
			<Node type="SingleQuote"/>
			<Node type="EscapeSequence"/>
			<Node type="SingleQuote"/>
		</StartNode>
	</ComplexType>
	
	<!-- 3.10.5 String Literals -->
	
	<ComplexType id="StringCharacters" processor="aggregating" checker="StringCharactersCheck">
		<StartNode sequence="Order">
			<Node type="InputCharacter"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="StringCharacter" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="StringCharacters"/>
			<Node type="EscapeSequence"/>
		</StartNode>
	</ComplexType>
	
	<ComplexType id="StringLiteral" processor="aggregating">
		<StartNode sequence="Order">
			<Node type="DoubleQuote"/>
			<Node type="StringCharacter" occurrence="ZeroOrMore"/>
			<Node type="DoubleQuote"/>
		</StartNode>
	</ComplexType>
	
	<!-- 3.10.7 The Null Literal -->
	
	<LiteralType id="NullLiteral" literal="null"/>
	
	<!-- 3.11 Separators -->
	
	<LiteralType id="bracket_open" literal="("/>
	<LiteralType id="bracket_close" literal=")"/>
	<LiteralType id="curlybracket_open" literal="{"/>
	<LiteralType id="curlybracket_close" literal="}"/>
	<LiteralType id="squarebracket_open" literal="["/>
	<LiteralType id="squarebracket_close" literal="]"/>
	<LiteralType id="semicolon" literal=";"/>
	<LiteralType id="comma" literal=","/>
	<LiteralType id="dot" literal="."/>
	<LiteralType id="tripledot" literal="..."/>
	<LiteralType id="at" literal="@"/>
	<LiteralType id="doubecolon" literal="::"/>
	
	<ComplexType id="Separator" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="bracket_open"/>
			<Node type="bracket_close"/>
			<Node type="curlybracket_open"/>
			<Node type="curlybracket_close"/>
			<Node type="squarebracket_open"/>
			<Node type="squarebracket_close"/>
			<Node type="semicolon"/>
			<Node type="comma"/>
			<Node type="dot"/>
			<Node type="tripledot"/>
			<Node type="at"/>
			<Node type="doubecolon"/>
		</StartNode>
	</ComplexType>
	
	<!-- 3.12 Operators -->
	
	<LiteralType id="equal" literal="="/>
	<LiteralType id="greaterthan" literal="&gt;"/>
	<LiteralType id="lowerthan" literal="&lt;"/>
	<LiteralType id="exclamationmark" literal="!"/>
	<LiteralType id="tilde" literal="~"/>
	<LiteralType id="questionmark" literal="?"/>
	<LiteralType id="colon" literal=":"/>
	<LiteralType id="arrowtoken" literal="-&gt;"/>
	
	<LiteralType id="doubleequal" literal="=="/>
	<LiteralType id="greaterthanorequal" literal="&gt;="/>
	<LiteralType id="lowerthanorequal" literal="&lt;="/>
	<LiteralType id="notequal" literal="!="/>
	<LiteralType id="doubleand" literal="&amp;&amp;"/>
	<LiteralType id="doubleor" literal="||"/>
	<LiteralType id="doubleplus" literal="++"/>
	<LiteralType id="doubleminus" literal="--"/>
	
	<LiteralType id="plus" literal="+"/>
	<LiteralType id="minus" literal="-"/>
	<LiteralType id="multiply" literal="*"/>
	<LiteralType id="divide" literal="/"/>
	<LiteralType id="and" literal="&amp;"/>
	<LiteralType id="or" literal="|"/>
	<LiteralType id="xor" literal="^"/>
	<LiteralType id="modulo" literal="%"/>
	<LiteralType id="shiftleft" literal="&lt;&lt;"/>
	<LiteralType id="shiftright" literal="&gt;&gt;"/>
	<LiteralType id="zerofillshiftright" literal="&gt;&gt;&gt;"/>
	
	<LiteralType id="plusequal" literal="+="/>
	<LiteralType id="minusequal" literal="-="/>
	<LiteralType id="multiplyequal" literal="*="/>
	<LiteralType id="divideequal" literal="/="/>
	<LiteralType id="andequal" literal="&amp;="/>
	<LiteralType id="orequal" literal="|="/>
	<LiteralType id="xorequal" literal="^="/>
	<LiteralType id="moduloequal" literal="%="/>
	<LiteralType id="shiftleftequal" literal="&lt;&lt;="/>
	<LiteralType id="shiftrightequal" literal="&gt;&gt;="/>
	<LiteralType id="zerofillshiftrightequal" literal="&gt;&gt;&gt;="/>
	
	<ComplexType id="Operator" processor="aggregating">
		<StartNode sequence="Any">
			<Node type="equal"/>
			<Node type="greaterthan"/>
			<Node type="lowerthan"/>
			<Node type="exclamationmark"/>
			<Node type="tilde"/>
			<Node type="questionmark"/>
			<Node type="colon"/>
			<Node type="arrowtoken"/>
			
			<Node type="doubleequal"/>
			<Node type="greaterthanorequal"/>
			<Node type="lowerthanorequal"/>
			<Node type="notequal"/>
			<Node type="doubleand"/>
			<Node type="doubleor"/>
			<Node type="doubleplus"/>
			<Node type="doubleminus"/>
			
			<Node type="plus"/>
			<Node type="minus"/>
			<Node type="multiply"/>
			<Node type="divide"/>
			<Node type="and"/>
			<Node type="or"/>
			<Node type="xor"/>
			<Node type="modulo"/>
			<Node type="shiftleft"/>
			<Node type="shiftright"/>
			<Node type="zerofillshiftright"/>
			
			<Node type="plusequal"/>
			<Node type="minusequal"/>
			<Node type="multiplyequal"/>
			<Node type="divideequal"/>
			<Node type="andequal"/>
			<Node type="orequal"/>
			<Node type="xorequal"/>
			<Node type="moduloequal"/>
			<Node type="shiftleftequal"/>
			<Node type="shiftrightequal"/>
			<Node type="zerofillshiftrightequal"/>
		</StartNode>
	</ComplexType>
</Language>
